import axios from 'axios';
import { OpenAIRequest, OpenAIResponse } from '../types';

const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '';

export interface AIMessageOptions {
  routeId: string;
  delayMinutes: number;
  messageType: 'email' | 'sms';
}

export class OpenAIService {
  static isConfigured(): boolean {
    return !!OPENAI_API_KEY;
  }

  static async generateDelayMessage(options: AIMessageOptions): Promise<string> {
    const { routeId, delayMinutes, messageType } = options;
    
    console.log(`ü§ñ Generating AI delay message (${messageType}) for route ${routeId} (${delayMinutes}min delay)`);
    
    if (!this.isConfigured()) {
      console.warn('‚ö†Ô∏è OpenAI not configured, using fallback message');
      return this.getFallbackMessage(delayMinutes, messageType);
    }

    try {
      const isShortMessage = messageType === 'sms';
      const lengthInstruction = isShortMessage 
        ? 'Keep it very brief (maximum 25 words, under 160 characters total including route info)' 
        : 'maximum 150 words';
      
      // Determine traffic condition based on delay
      let trafficCondition = 'moderate';
      if (delayMinutes > 30) trafficCondition = 'severe';
      else if (delayMinutes > 15) trafficCondition = 'heavy';
      else if (delayMinutes > 5) trafficCondition = 'moderate';
      else trafficCondition = 'light';
      
      const prompt = `You are a helpful delivery service representative. A customer is expecting a freight delivery, but there's a traffic delay of ${delayMinutes} minutes due to ${trafficCondition} traffic conditions.

      Write a ${isShortMessage ? 'very short and concise' : 'friendly, professional, and empathetic'} message (${lengthInstruction}) that:
      1. ${isShortMessage ? 'Briefly mentions' : 'Acknowledges'} the delay
      2. ${isShortMessage ? 'States' : 'Explains'} it's due to traffic conditions
      3. ${isShortMessage ? 'Brief apology' : 'Apologizes for any inconvenience'}
      ${isShortMessage ? '' : '4. Reassures them about the delivery\n5. Maintains a positive, professional tone'}
  
      The delay is ${delayMinutes} minutes with ${trafficCondition} traffic conditions.

      ${isShortMessage ? 'SMS Example: "Hi! Your delivery is delayed 30min due to heavy traffic. Sorry for the inconvenience. ETA updated."' : ''}`;

      const openAIRequest: OpenAIRequest = {
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `You are a professional delivery service customer representative who writes ${isShortMessage ? 'very concise SMS messages' : 'clear, empathetic, and detailed'} delay notifications.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: isShortMessage ? 50 : 200,
        temperature: 0.7
      };

      const response = await axios.post<OpenAIResponse>(
        'https://api.openai.com/v1/chat/completions',
        openAIRequest,
        {
          headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000 // 30 second timeout
        }
      );

      const generatedMessage = response.data.choices[0]?.message?.content?.trim();
      
      if (!generatedMessage) {
        throw new Error('No message generated by AI');
      }

      console.log(`‚úÖ AI ${messageType} message generated (${generatedMessage.length} chars):`, {
        routeId,
        messageType,
        length: generatedMessage.length
      });
      
      return generatedMessage;

    } catch (error) {
      console.error('‚ùå OpenAI service error:', error);
      console.log(`üîÑ Using fallback ${messageType} message due to AI API failure`);
      return this.getFallbackMessage(delayMinutes, messageType);
    }
  }

  private static getFallbackMessage(delayMinutes: number, messageType: 'email' | 'sms'): string {
    const fallbackMessage = messageType === 'sms'
      ? `Hi! Your delivery is delayed ${delayMinutes}min due to traffic. Sorry for the inconvenience.`
      : `Dear Valued Customer,

        We wanted to inform you that your freight delivery is experiencing a delay of approximately ${delayMinutes} minutes due to traffic conditions on the route.

        We sincerely apologize for any inconvenience this may cause. Our driver is working diligently to reach you as quickly and safely as possible, and we appreciate your patience.

        Thank you for choosing our delivery service.

        Best regards,
        Delivery Team`;

    return fallbackMessage;
  }

  static async sendTestMessage(): Promise<string> {
    return this.generateDelayMessage({
      routeId: 'TEST-001',
      delayMinutes: 15,
      messageType: 'email'
    });
  }
}
